#!/usr/bin/env python3.10
r"""
Usage:
    pixelfont [PATH]
    pixelfont -h | --help

Arguments:
    path           Path to the png file with a font

Options:
    -h --help      Show this screen.
"""
# TODO: add examples to the docstring
import png
from pathlib import Path

BLOCK_CHARS = " \u2584\u2580\u2588"
PRINTABLE_CHARS = (
    " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOP"
    + "QRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
)


class Font:
    def __init__(self, characters: list[bytes]):
        assert all(0 <= column <= 127 for column in b"".join(characters))
        assert len(characters) == 95
        self.characters = characters

    def __contains__(self, s: str):
        return all(32 <= ord(char) <= 126 for char in s)

    def __getitem__(self, char: str):
        return self.characters[ord(char) - 32]

    def __repr__(self):
        return f"{__class__.__qualname__}({self.characters})"

    def get_width(self, text: str):
        return sum(len(self[char]) for char in text)

    def save(self, path: Path | str):
        png_rows = [[]]
        char_rows = [PRINTABLE_CHARS[i:i+32] for i in range(0, len(PRINTABLE_CHARS), 32)]
        width = 1 + max(sum(self.get_width(char) + 3 for char in row) for row in char_rows)
        height = 1 + 10 * len(char_rows)
        for chars in char_rows:
            rows = [[2] for _ in range(10)]
            for char in chars:
                for column in [0] + list(self[char]) + [0]:
                    rows[0].append(0)
                    for i, y in enumerate(range(6, -1, -1), 1):
                        rows[i].append(column >> y & 1)
                    rows[~1].append(0)
                    rows[~0].append(2)
                for i in range(10):
                    rows[i].append(2)
            png_rows.extend(rows)
        palette = [(0x00, 0x00, 0x00), (0x00, 0xFF, 0xFF), (0xFF, 0x00, 0xFF)]
        png.Writer(width, height, palette=palette).write(
            Path(path).open("wb"), [row + [2] * (width - len(row)) for row in png_rows]
        )

    @staticmethod
    def load(path: Path | str):
        png_reader = png.Reader(file=Path(path).open("rb"))
        width, height, rows, _ = png_reader.asRGB8()
        pixels = tuple(
            tuple(tuple(row[i: i + 3]) for i in range(0, len(row), 3))
            for row in rows
        )
        marker_color, background_color = pixels[0][0], pixels[1][1]
        font, x0, y0 = [], 0, 0
        while len(font) < 95 and x0 < width and y0 < height:
            character = []
            x_next = x0 + 1
            while x_next < width and pixels[y0 + 1][x_next] != marker_color:
                x_next += 1
            for x in range(x0 + 2, x_next - 1):
                column = []
                for y in range(y0 + 8, y0 + 1, -1):
                    column.append(pixels[y][x] != background_color)
                character.append(sum(x * 2**i for i, x in enumerate(column)))
            font.append(bytes(character))
            x0 = x_next
            while x0 < width - 1 and pixels[y0 + 1][x0 + 1] == marker_color:
                x0 += 1
            if x0 >= width - 3:
                x0, y0 = 0, y0 + 10
        return Font(font)


DEFAULT_FONT = Font([
    b"\x00\x00\x00", b":", b"`\x00`", b"\x14>\x14>\x14", b"\x1ak,", b"\x12\x04\x08\x12",
    b"\x12.:$", b"`", b">A", b"A>", b"\x14\x08\x14", b"\x08\x1c\x08", b"\x03", b"\x08\x08\x08",
    b"\x02", b"\x06\x18`", b'>">', b'">\x02', b".*:", b"**>", b"8\x08>", b":*.", b">*.", b" &8",
    b">*>", b":*>", b"\x14", b"\x16", b'\x08\x14"', b"\x14\x14\x14", b'"\x14\x08', b" *0",
    b'\x1c"*\x1a', b">(>", b">*6", b'>"6', b'>"\x1c', b'>*"', b">( ", b'>".', b">\x08>", b'">"',
    b"\x06\x02>", b">\x086", b">\x02\x02", b">\x10\x08\x10>", b">\x08\x04>", b'\x1e"<', b">(8",
    b'>"?', b">(6", b"\x1a*,", b" > ", b"<\x02>", b"<\x02<", b"<\x02<\x02<", b"6\x086", b"0\x0e0",
    b"&*2", b"\x7fA", b"`\x18\x06", b"A\x7f", b"\x08\x10\x08", b"\x01\x01\x01", b"@ ",
    b"\x16\x12\x1e", b"~\x12\x1e", b"\x1e\x12\x12", b"\x1e\x12~", b"\x1e\x12\x1a", b"\x10~P",
    b"\x1c\x15\x1f", b"~\x10\x1e", b"^", b"\x01_", b"~\x04\x1a", b">", b"\x1e\x10\x1e\x10\x0e",
    b"\x1e\x10\x0e", b"\x1e\x12\x1e", b"\x1f\x12\x1e", b"\x1e\x12\x1f", b"\x1e\x10\x18",
    b"\x1a\x12\x16", b"\x10>\x12", b"\x1c\x02\x1e", b"\x1c\x02\x1c", b"\x1c\x02\x1c\x02\x1c",
    b"\x1a\x04\x1a", b"\x1d\x05\x1e", b"\x16\x12\x1a", b"\x08wA", b"\x7f", b"Aw\x08",
    b"\x04\x0c\x08",
])


def display(message: str, font: Font):
    assert message in font
    for y in range(3, -1, -1):
        yield " ".join(
            "".join(BLOCK_CHARS[col >> 2 * y & 3] for col in font[char])
            for char in message
        )


if __name__ == "__main__":
    font = DEFAULT_FONT
    args = __import__("docopt").docopt(__doc__)
    if path := args["PATH"]:
        print(end="loading...", flush=True)
        font = Font.load(path)
        print("\rSuccessfully loaded font", repr(path))
    while line := input(">>> "):
        for line in display(line, font=font):
            print(" " + line)
        print()
