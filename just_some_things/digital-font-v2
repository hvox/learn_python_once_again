#!/usr/bin/env python3
"""
Display text in my own digital font.

Usage: {script} [options] [TEXT]

Arguments:
    TEXT - Text to display.

Options:
    -h, --help
        Show this screen and exit.
"""
import os
from itertools import islice
import sys
from contextlib import suppress
from pathlib import Path


CHARACTERS = {
    " ": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "!": [[0, 0], [0, 1, 0], [0, 0], [0, 2, 0], [0, 0]],
    '"': [[0, 0], [0, 0, 0], [0, 0], [0, 3, 0], [0, 0]],
    "#": [[0, 0], [0, 4, 0], [0, 0], [0, 4, 0], [0, 0]],
    "$": [[1, 1], [0, 2, 1], [1, 1], [1, 2, 0], [1, 1]],
    "%": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "&": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "'": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "(": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    ")": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "*": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "+": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    ",": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "-": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    ".": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "/": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "0": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "1": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "2": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "3": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "4": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "5": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "6": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "7": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "8": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "9": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    ":": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    ";": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "<": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "=": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    ">": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "?": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "@": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "A": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "B": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "C": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "D": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "E": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "F": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "G": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "H": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "I": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "J": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "K": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "L": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "M": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "N": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "O": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "P": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "Q": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "R": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "S": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "T": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "U": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "V": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "W": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "X": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "Y": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "Z": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "[": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "\\": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "]": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "^": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "_": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "`": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "a": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "b": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "c": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "d": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "e": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "f": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "g": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "h": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "i": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "j": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "k": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "l": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "m": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "n": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "o": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "p": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "q": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "r": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "s": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "t": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "u": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "v": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "w": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "x": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "y": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "z": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "{": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "|": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "}": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
    "~": [[0, 0], [0, 0, 0], [0, 0], [0, 0, 0], [0, 0]],
}


def draw_line(buffer: list[list[int]], x1: int, y1: int, x2: int, y2: int):
    line_length = max(abs(x2 - x1), abs(y2 - y1))
    for i in range(line_length + 1):
        t = i / max(line_length, 1)
        x = x1 + round((x2 - x1) * t)
        y = y1 + round((y2 - y1) * t)
        buffer[y][x] = 1


def draw_buffer(buffer: list[list[int]]):
    if len(buffer) % 2:
        buffer = buffer + [[0] * len(buffer[0])]
    for line1, line2 in chunked(reversed(buffer), 2):
        line = (" ▀▄█"[x + y * 2] for x, y in zip(line1, line2))
        print("".join(line))


def buffer_to_lines(buffer: list[list[int]]):
    if len(buffer) % 2:
        buffer = buffer + [[0] * len(buffer[0])]
    for line1, line2 in chunked(reversed(buffer), 2):
        line = (" ▀▄█"[x + y * 2] for x, y in zip(line1, line2))
        yield "".join(line)


def draw_char(buffer: list[list[int]], char: str, x: int = 1, y: int = 1):
    bottom, bottom_star, middle, top_star, top = CHARACTERS[char]
    if bottom[0]:
        draw_line(buffer, x, y, x + 2, y)
    if bottom[1]:
        draw_line(buffer, x + 2, y, x + 4, y)
    if bottom_star[0]:
        draw_line(buffer, x, y, x, y + 4)
    # .!"
    if bottom_star[1] == 1:
        draw_line(buffer, x + 2, y + 2, x + 2, y + 2)
    elif bottom_star[1] == 2:
        draw_line(buffer, x + 2, y, x + 2, y + 4)
    elif bottom_star[1] == 3:
        draw_line(buffer, x + 1, y, x + 1, y + 4)
        draw_line(buffer, x + 3, y, x + 3, y + 4)
    elif bottom_star[1] == 4:
        draw_line(buffer, x + 1, y, x + 1, y + 4)
        draw_line(buffer, x + 3, y, x + 3, y + 4)
        draw_line(buffer, x, y + 2, x + 4, y + 2)
    if bottom_star[2]:
        draw_line(buffer, x + 4, y, x + 4, y + 4)
    if middle[0]:
        draw_line(buffer, x, y + 4, x + 2, y + 4)
    if middle[1]:
        draw_line(buffer, x + 2, y + 4, x + 4, y + 4)
    if top_star[0]:
        draw_line(buffer, x, y + 4, x, y + 8)
    if top_star[1] == 1:
        draw_line(buffer, x + 2, y + 6, x + 2, y + 6)
    elif top_star[1] == 2:
        draw_line(buffer, x + 2, y + 4, x + 2, y + 8)
    elif top_star[1] == 3:
        draw_line(buffer, x + 1, y + 4, x + 1, y + 8)
        draw_line(buffer, x + 3, y + 4, x + 3, y + 8)
    elif top_star[1] == 4:
        draw_line(buffer, x + 1, y + 4, x + 1, y + 8)
        draw_line(buffer, x + 3, y + 4, x + 3, y + 8)
        draw_line(buffer, x, y + 6, x + 4, y + 6)
    if top_star[2]:
        draw_line(buffer, x + 4, y + 4, x + 4, y + 8)
    if top[0]:
        draw_line(buffer, x, y + 8, x + 2, y + 8)
    if top[1]:
        draw_line(buffer, x + 2, y + 8, x + 4, y + 8)


def display(text: str):
    w, h = os.get_terminal_size()
    buffer = [[0] * w for y in range(16)]
    for i, char in enumerate(CHARACTERS):
        draw_char(buffer, char, 2 + 6 * i, 2)
    draw_buffer(buffer)


def main(script_name: str, *script_args: str):
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    if args["TEXT"] is not None:
        display(args["TEXT"])
    else:
        while text := input("> "):
            display(text)


def chunked(iterable, n: int):
    it = iter(iterable)
    while chunk := list(islice(it, n)):
        yield chunk


if __name__ == "__main__":
    with suppress(KeyboardInterrupt):
        main(sys.argv[0], *sys.argv[1:])
