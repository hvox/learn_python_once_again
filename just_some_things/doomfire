#!/usr/bin/env python3.10
import os
import sys
import time
import select
import contextlib
from random import randint

try:
    import termios
except ModuleNotFoundError:
    termios = None

UPPER_BLOCK, FULL_BLOCK = "\u2580\u2588"


def get_background_color(timeout=0.1, default_color=(7710, 8738, 10794)):
    if not termios:
        return (3084, 3084, 3084)
    stdin_fd = sys.stdin.fileno()
    prev_flags = termios.tcgetattr(stdin_fd)
    flags = prev_flags.copy()
    flags[3] &= ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(stdin_fd, termios.TCSANOW, flags)
    sys.stdout.write("\x1b]11;?\x07")
    sys.stdout.flush()
    if select.select([sys.stdin], [], [], timeout)[0] != [sys.stdin]:
        termios.tcsetattr(stdin_fd, termios.TCSADRAIN, prev_flags)
        return default_color
    color = os.read(stdin_fd, 24)[9:23]
    termios.tcsetattr(stdin_fd, termios.TCSADRAIN, prev_flags)
    with contextlib.suppress(ValueError):
        color = tuple(int(color, 16) for color in color.decode().split("/"))
        if len(color) == 3 and all(0 <= x <= 65535 for x in color):
            return color


class ColorArray2d:
    def __init__(self, width: int, height: int):
        self.width, self.height = width, height
        self.elements = bytearray(width * height * 3)

    def __getitem__(self, index: tuple[int, int]) -> tuple[int, int, int]:
        i = index[1] % self.height * self.width + index[0] % self.width
        return tuple(self.elements[3 * i: 3 * i + 3])

    def __setitem__(self, index: tuple[int, int], color: tuple[int, int, int]):
        i = index[1] % self.height * self.width + index[0] % self.width
        for j, channel in enumerate(color):
            self.elements[3 * i + j] = channel


class PixelPainter:
    def __init__(self, width: int, height: int):
        self.width = width
        self.height = height + height % 2
        self.buffer = ColorArray2d(self.width, self.height)
        self.queue = set()

    def show_block(self, line: int, column: int):
        top = self.buffer[column, self.height - line * 2 - 1]
        bottom = self.buffer[column, self.height - line * 2 - 2]
        print(
            end=f"\x1b[{line + 1};{column + 1}f"
            + "\x1b[38;2;" + ";".join(map(str, top))
            + "m\x1b[48;2;" + ";".join(map(str, bottom)) + "m"
            + UPPER_BLOCK
        )

    def refresh(self):
        for x, y in self.queue:
            self.show_block(self.height // 2 - y // 2 - 1, x)
        self.queue = set()
        print(end="\x1b[1;39m\x1b[1;49m", flush=True)

    def __enter__(self):
        print(end="\x1b7\x1b[?25l")
        for line in range(self.height // 2):
            for column in range(self.width):
                self.show_block(line, column)
        return self

    def __exit__(self, *_):
        print(end="\x1b8\x1b[?25h\x1b[1;39m\x1b[1;49m")

    def __getitem__(self, index: tuple[int, int]) -> tuple[int, int, int]:
        index = (index[0] % self.width, index[1] % self.height)
        return self.buffer[index]

    def __setitem__(self, index: tuple[int, int], color: tuple[int, int, int]):
        index = (index[0] % self.width, index[1] % self.height)
        if self.buffer[index] != color:
            self.buffer[index] = color
            self.queue.add((index[0], index[1] // 2 * 2))


# background = tuple(round(x / 257) for x in get_background_color())
palette = [(min(i, 255), max(0, i - 255), max(0, i - 255)) for i in range(511)]
palette = """
 000000 070707 1f0707 2f0f07 3f0f07 470f07 571707 671f07 771f07 8f2707
 9f2f07 af3f07 bf4707 c74707 df4f07 df5707 df5707 df6707 df5707 d75f07
 d7600a d7670f cf6f0f cf770f cf7f0f cf8717 c78717 c78f17 c7971f bf9f1f
 bf9f1f bfa727 bfa727 bfaf2f b7b72f b7b737 cfcf6f dfdf9f efefc7 ffffff
"""
palette = [
    tuple(int(channel, 16) for channel in (color[:2], color[2:4], color[4:]))
    for color in palette.strip().split()
]
color2palette = {color: i for i, color in enumerate(palette)}
width, height = os.get_terminal_size()
with PixelPainter(w := width, h := height * 2) as screen:
    for x in range(w):
        screen[x, 0] = palette[-1]
    t_start, total_frames, running = time.monotonic(), 0, True
    while running:
        try:
            for _ in range(w):
                x0, y0 = randint(0, w - 1), randint(0, h - 1)
                lvl = max(0, color2palette[screen[x0, y0]] - randint(1, 4))
                x1, y1 = randint(-2, 1) + x0, randint(1, 3) + y0
                if y1 < h:
                    screen[x1, y1] = palette[lvl]
            screen.refresh()
            total_frames += 1
        except KeyboardInterrupt:
            running = False
    t_end = time.monotonic()
fps = total_frames / (t_end - t_start)
print(f"\rAverage frames per second: {fps}")
