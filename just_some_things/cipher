#!/usr/bin/env python3.10
r"""
Usage:
    cipher encode <password>
    cipher decode <password>
    cipher -h | --help

Commands:
    encode         Encode message from stdin using specified password.
    decode         Use specified password in order to decode the code.

Options:
    -h --help      Show this screen.
"""
import hashlib
import sys


def hash(msg: bytes) -> bytes:
    return hashlib.sha3_256(msg).digest()


def xor(x: bytes, y: bytes) -> bytes:
    return bytes(x ^ y for x, y in zip(x, y))


def encrypt(password: str, message: bytes) -> bytes:
    seed, result = int.from_bytes(hash(password.encode()), "little"), []
    message = hash(message) + message
    for i in range(0, len(message), 32):
        secret = hash((seed + i).to_bytes(33, "little"))
        result.append(xor(message[i : i + 32], secret))
    return b"".join(result)


def decrypt(password: str, code: bytes) -> bytes:
    seed, result = int.from_bytes(hash(password.encode()), "little"), []
    for i in range(0, len(code), 32):
        secret = hash((seed + i).to_bytes(33, "little"))
        result.append(xor(code[i : i + 32], secret))
    hash_sum = result.pop(0)
    if hash_sum != hash(b"".join(result)):
        raise ValueError("Wrong password")
    return b"".join(result)


if __name__ == "__main__":
    args = __import__("docopt").docopt(__doc__)
    password = args["<password>"]
    action = encrypt if args["encode"] else decrypt
    try:
        sys.stdout.buffer.write(action(password, sys.stdin.buffer.read()))
    except ValueError:
        error = "ERROR: Failed to decrypt, since the password is wrong."
        exit("\x1b[31m" + error + "\x1b[0m" if sys.stderr.isatty() else error)
