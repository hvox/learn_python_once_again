#!/usr/bin/env python3.10
r"""
Usage:
    cipher encode <password>
    cipher decode <password>
    cipher -h | --help

Commands:
    encode         Encode message from stdin using specified password.
    decode         Use specified password in order to decode the code.

Options:
    -h --help      Show this screen.
"""
import hashlib
import sys

hash = lambda msg: hashlib.sha3_256(msg).digest()
xor = lambda x, y: bytes(x ^ y for x, y in zip(x, y))


def encrypt(password: str, data: bytes) -> bytes:
    data = hash(data) + data
    result, seed = [], hash(password.encode())
    for chunk in (data[i : i + 32] for i in range(0, len(data), 32)):
        result.append(xor(chunk, seed))
        seed = hash(seed + chunk + password.encode())
    return b"".join(result)


def decrypt(password: str, code: bytes) -> bytes:
    result, seed = [], hash(password.encode())
    for chunk in (code[i : i + 32] for i in range(0, len(code), 32)):
        result.append(xor(chunk, seed))
        seed = hash(seed + result[-1] + password.encode())
    hash_sum = result.pop(0)
    message = b"".join(result)
    if hash_sum != hash(message):
        raise ValueError("Wrong password")
    return message


if __name__ == "__main__":
    args = __import__("docopt").docopt(__doc__)
    password = args["<password>"]
    action = encrypt if args["encode"] else decrypt
    try:
        sys.stdout.buffer.write(action(password, sys.stdin.buffer.read()))
    except ValueError:
        error = "ERROR: Failed to decrypt, since the password is wrong."
        exit("\x1b[31m" + error + "\x1b[0m" if sys.stderr.isatty() else error)
